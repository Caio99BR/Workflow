name: "MSYS2"

on:
  workflow_call:
    inputs:
      build-id:
        description: "build id"
        type: string
        required: true
      cpm-cache-version:
        description: "CPM cache version (e.g. v7)"
        type: string
        required: true
      devel:
        description: 'development build'
        type: string
        required: true

env:
  DISABLE_ARM: ${{ vars.DISABLE_ARM }}
  SCCACHE_GHA_ENABLED: "true"
  CCACHE: "true"
  FORGEJO_TOKEN: ${{ secrets.FORGEJO_TOKEN }}
  DEVEL: ${{ inputs.devel }}

jobs:
  msys-matrix:
    name: "Generate MSYS compilers"
    runs-on: ubuntu-latest
    outputs:
      compiler: ${{ steps.set.outputs.compiler }}
    steps:
      - id: set
        run: |
          PGO='{"program": "clang", "target": "pgo"}'
          CLANG='{"program": "clang", "target": "standard"}'
          GCC='{"program": "gcc", "target": "standard"}'

          if [ "${{ inputs.build-id }}" = "tag" ]; then
            COMPILER="[${GCC},${PGO}]"
          else
            COMPILER="[${GCC}]"
          fi

          echo $COMPILER
          echo "compiler=${COMPILER}" >> $GITHUB_OUTPUT

  # TODO: setup
  # TODO: once arm64 builds work, combine this with windows.yml
  msys:
    name: "MSYS2-MinGW64 ${{ matrix.os.arch }} ${{ matrix.compiler.program }} ${{ matrix.compiler.target }}"
    needs: [msys-matrix]
    runs-on: ${{ matrix.os.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - runs-on: windows-latest
            arch: amd64
            msystem: mingw64

          # TODO: this requires some cross-comp stuff
          # - runs-on: ubuntu-24.04-arm
          #   arch: arm64

        compiler: ${{ fromJson(needs.msys-matrix.outputs.compiler) }}

    env:
      QT_VERSION: 6.9.1
      TARGET: ${{ matrix.os.arch }}
      COMPILER: "${{ matrix.compiler.program }}"
      PGO_TARGET: "${{ matrix.compiler.target }}"
      ARCH: ${{ matrix.os.arch }}-${{ matrix.compiler.program }}-${{ matrix.compiler.target }}
      WINDEPLOYQT: "C:/msys64/mingw64/bin/windeployqt.exe"

    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Setup
        uses: ./.github/workflows/setup
        with:
          key: MSYS2-${{ matrix.os.msystem }}-${{ matrix.os.arch }}-${{ matrix.compiler.program }}
          version: ${{ inputs.cpm-cache-version }}

      - name: Load payload environment
        shell: bash
        run: |
          . ./.ci/fj/load-env.sh

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.os.msystem }}
          update: true
          install: >-
            git make autoconf libtool automake-wrapper patch jq
          pacboy: >-
            qt6-base:p qt6-tools:p qt6-translations:p
            cmake:p clang:p toolchain:p python-pip:p openssl:p sccache:p
            vulkan-memory-allocator:p vulkan-devel:p glslang:p
            boost:p fmt:p lz4:p nlohmann-json:p zlib:p zstd:p enet:p
            opus:p mbedtls:p libusb:p unordered_dense:p

      - name: Configure
        shell: msys2 {0}
        run: |
          .ci/common/configure.sh -DCCACHE_PATH=sccache

      - name: Build
        shell: msys2 {0}
        run: cmake --build build

      - name: Package
        shell: msys2 {0}
        run: ./.ci/windows/package.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: mingw-${{ env.ARCH }}
          path: artifacts/*

